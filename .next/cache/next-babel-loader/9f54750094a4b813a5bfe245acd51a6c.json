{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: '',\n      number: '',\n      message: '',\n      email: '',\n      messageSent: false,\n      errors: {},\n      addONS: {\n        'name': 'price'\n      },\n      total: 0\n    });\n\n    _defineProperty(this, \"sendEmail\", e => {\n      alert('E Sent');\n      this.handleErrors();\n      console.log(this.state);\n      emailjs.send('default_service', 'responsive_renovations', {\n        senderEmail: this.state.email,\n        senderName: this.state.name,\n        senderMessage: this.state.message,\n        senderPhoneNumber: this.state.number,\n        receiverEmail: 'responsiverenovations@gmail.com'\n      }, 'user_ra9kLqa47SSFhb4QI3Swp').then(result => {\n        console.log(result.text);\n        this.setState({\n          messageSent: True\n        });\n        setTimeout(() => {\n          setstate(prev => _objectSpread({}, prev, {}, initialState));\n          this.setState(prev => _objectSpread({}, prev, {}, initialState));\n        }, 3000);\n      }, error => {\n        console.log(error.text);\n      });\n    });\n\n    _defineProperty(this, \"setField\", (targetID, textValue) => {\n      console.log('Run');\n      this.setState(() => {\n        return {\n          [targetID]: textValue\n        };\n      });\n      setTimeout(() => {\n        console.log(this.state);\n      }, 300);\n    });\n\n    _defineProperty(this, \"handleErrors\", e => {\n      const error = {};\n\n      if (!this.state.name) {\n        error.name = 'First Name field shouldn’t be empty';\n        this.setField('name', error.name);\n      }\n\n      if (!this.state.email) {\n        error.email = 'Email field shouldn’t be empty';\n        this.setField('email', error.name);\n      }\n\n      if (!this.state.message) {\n        error.message = 'Message field shouldn’t be empty';\n        this.setField('message', error.name);\n      }\n\n      if (this.state.error) {\n        setErrors(this.state.error);\n      } else {\n        console.log(\"PASS\");\n      }\n\n      if (!error) {\n        console.log('PASS');\n      } else {\n        return;\n      }\n    });\n  }\n\n  render() {\n    return __jsx(ProductContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        setValue: this.setField,\n        handleSubmit: this.sendEmail\n      })\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer, ProductContext };","map":null,"metadata":{},"sourceType":"module"}